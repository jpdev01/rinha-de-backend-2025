/*
 * This file is generated by jOOQ.
 */
package com.jpdev01.rinha.jooq.tables.daos;


import com.jpdev01.rinha.jooq.tables.Payments;
import com.jpdev01.rinha.jooq.tables.records.PaymentsRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PaymentsDao extends DAOImpl<PaymentsRecord, com.jpdev01.rinha.jooq.tables.pojos.Payments, UUID> {

    /**
     * Create a new PaymentsDao without any configuration
     */
    public PaymentsDao() {
        super(Payments.PAYMENTS, com.jpdev01.rinha.jooq.tables.pojos.Payments.class);
    }

    /**
     * Create a new PaymentsDao with an attached configuration
     */
    public PaymentsDao(Configuration configuration) {
        super(Payments.PAYMENTS, com.jpdev01.rinha.jooq.tables.pojos.Payments.class, configuration);
    }

    @Override
    public UUID getId(com.jpdev01.rinha.jooq.tables.pojos.Payments object) {
        return object.getCorrelationId();
    }

    /**
     * Fetch records that have <code>correlation_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.jpdev01.rinha.jooq.tables.pojos.Payments> fetchRangeOfCorrelationId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Payments.PAYMENTS.CORRELATION_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>correlation_id IN (values)</code>
     */
    public List<com.jpdev01.rinha.jooq.tables.pojos.Payments> fetchByCorrelationId(UUID... values) {
        return fetch(Payments.PAYMENTS.CORRELATION_ID, values);
    }

    /**
     * Fetch a unique record that has <code>correlation_id = value</code>
     */
    public com.jpdev01.rinha.jooq.tables.pojos.Payments fetchOneByCorrelationId(UUID value) {
        return fetchOne(Payments.PAYMENTS.CORRELATION_ID, value);
    }

    /**
     * Fetch a unique record that has <code>correlation_id = value</code>
     */
    public Optional<com.jpdev01.rinha.jooq.tables.pojos.Payments> fetchOptionalByCorrelationId(UUID value) {
        return fetchOptional(Payments.PAYMENTS.CORRELATION_ID, value);
    }

    /**
     * Fetch records that have <code>amount BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.jpdev01.rinha.jooq.tables.pojos.Payments> fetchRangeOfAmount(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Payments.PAYMENTS.AMOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>amount IN (values)</code>
     */
    public List<com.jpdev01.rinha.jooq.tables.pojos.Payments> fetchByAmount(BigDecimal... values) {
        return fetch(Payments.PAYMENTS.AMOUNT, values);
    }

    /**
     * Fetch records that have <code>requested_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.jpdev01.rinha.jooq.tables.pojos.Payments> fetchRangeOfRequestedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Payments.PAYMENTS.REQUESTED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>requested_at IN (values)</code>
     */
    public List<com.jpdev01.rinha.jooq.tables.pojos.Payments> fetchByRequestedAt(LocalDateTime... values) {
        return fetch(Payments.PAYMENTS.REQUESTED_AT, values);
    }

    /**
     * Fetch records that have <code>processed_at_default BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<com.jpdev01.rinha.jooq.tables.pojos.Payments> fetchRangeOfProcessedAtDefault(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Payments.PAYMENTS.PROCESSED_AT_DEFAULT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>processed_at_default IN (values)</code>
     */
    public List<com.jpdev01.rinha.jooq.tables.pojos.Payments> fetchByProcessedAtDefault(Boolean... values) {
        return fetch(Payments.PAYMENTS.PROCESSED_AT_DEFAULT, values);
    }
}
